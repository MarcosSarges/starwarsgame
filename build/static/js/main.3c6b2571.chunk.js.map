{"version":3,"sources":["serviceWorker.ts","services/api/api.ts","services/utils/random.ts","services/notifications/notification.ts","services/api/methods.ts","components/InputSearch/index.tsx","components/Hidden/index.tsx","components/PlanetCard/index.tsx","components/Loading/index.tsx","pages/Main/index.tsx","components/Bg/index.tsx","index.tsx","Router.tsx"],"names":["Boolean","window","location","hostname","match","api","axios","create","baseURL","headers","random","max","Math","floor","Toast","Swal","mixin","toast","position","showConfirmButton","timer","errorNotification","message","fire","type","title","sortPlanet","Promise","result","reject","a","get","pgs","sortNum","data","count","res","films","length","getFilms","url","all","map","el","Axios","then","_res","catch","err","searchPlanet","string","search","error","results","InputSearch","props","className","inputProps","buttonProps","labelButton","secundButton","secundLabelButton","React","useState","hidden","setHidden","onClick","style","cursor","borderBottom","txt","PlanetCard","name","Hidden","population","climate","terrain","countFilms","Loading","Main","loading","setLoading","planetSort","setPlanetSort","input","setInput","init","console","log","handleSearch","finally","useEffect","value","onChange","e","target","placeholder","onSubmit","preventDefault","planet","key","join","Bg","ReactDOM","render","exact","path","component","from","to","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c6b2571.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://swapi.co/api/\",\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\n\nexport default api;\n","const random = (max: number) => Math.floor(Math.random() * max + 1);\nexport default random;\n","import Swal from \"sweetalert2\";\n\nconst Toast = Swal.mixin({\n  toast: true,\n  position: \"top-end\",\n  showConfirmButton: false,\n  timer: 3000\n});\n\nexport const successNotification = (message: string) => {\n  Toast.fire({\n    type: \"success\",\n    title: message\n  });\n};\n\nexport const errorNotification = (message: string) => {\n  Toast.fire({\n    type: \"error\",\n    title: message\n  });\n};\n\nexport const modalNotification = (message: string) => {\n  Swal.fire({\n    // position: 'top-end',\n    type: \"success\",\n    title: message,\n    showConfirmButton: true,\n    timer: 3000\n  });\n};\n","import api from \"./api\";\nimport { ResultPlanet, DataPlanet } from \"./ResultPlanet\";\nimport Axios from \"axios\";\nimport random from \"../utils/random\";\nimport { errorNotification } from \"../notifications/notification\";\nimport { DataFilm } from \"./ResultFilms\";\n\ntype resPlanetAll = {\n  data: ResultPlanet;\n};\n\ntype resPlanetOne = {\n  data: DataPlanet;\n};\n\ntype resFilmGetFilms = {\n  data: DataFilm[];\n};\n\n// type resFilmOne = {\n//   data: DataFilm;\n// };\n\nexport const sortPlanet = () =>\n  new Promise(async (result, reject) => {\n    try {\n      const pgs: resPlanetAll = await api.get(\"/planets\");\n      // const countPgs = Math.ceil(pgs.data.count / 10);\n      // const sortNum = random(countPgs);\n      const sortNum = random(pgs.data.count);\n      const res: resPlanetOne = await api.get(`/planets/${sortNum}`);\n      let films: DataFilm[] = [];\n      if (res.data.films.length > 0) {\n        films = await getFilms(res.data.films);\n      }\n      result({\n        ...res.data,\n        ...(films.length > 0 ? { films } : {})\n      });\n    } catch (error) {\n      errorNotification(\"Erro ao sortear um card.\");\n    }\n  });\n\nexport const getFilm = (url: string): Promise<DataFilm> =>\n  new Promise(async (result, reject) => {\n    try {\n      const film = await api.get(url);\n      result(film.data);\n    } catch (error) {\n      reject(error);\n      errorNotification(\"Erro ao buscar o filme.\");\n    }\n  });\n\nexport const getFilms = (url: string[]): Promise<DataFilm[]> =>\n  new Promise(async (result, reject) => {\n    await Promise.all(url.map(el => Axios.get(el)))\n      .then((res: { data: DataFilm }[]) => {\n        const _res = res.map(el => el.data);\n        result(_res);\n      })\n      .catch(err => {\n        reject(err);\n        errorNotification(\"Erro ao buscar os filmes.\");\n      });\n  });\n\nexport const searchPlanet = (string: string) =>\n  new Promise(async (result, reject) => {\n    const search: resPlanetAll = await api.get(`/planets/?search=${string}`);\n    if (search.data.count === 0) {\n      reject({\n        error: \"Nada foi encontrado.\"\n      });\n      errorNotification(\"Nada foi encontrado.\");\n    }\n    result(search.data.results);\n  });\n","import React from \"react\";\nimport \"./styles.css\";\n\ntype PropsInputSearch = {\n  inputProps?: React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  buttonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  secundButton?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n  labelButton: string;\n  secundLabelButton: string;\n};\n\nexport default function InputSearch(props: PropsInputSearch) {\n  return (\n    <form className=\"form\">\n      <input {...props.inputProps} />\n      <button type=\"submit\" {...props.buttonProps}>\n        {props.labelButton}\n      </button>\n      <button type=\"button\" {...props.secundButton}>\n        {props.secundLabelButton}\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport default (props: { txt: string | number }) => {\n  const [hidden, setHidden] = React.useState(true);\n  return (\n    <span\n      onClick={() => {\n        setHidden(!hidden);\n      }}\n      style={{\n        cursor: \"pointer\",\n        borderBottom: hidden ? \"1px solid rgb(241,237,0)\" : \"none\"\n      }}\n    >\n      {hidden ? \"Exibir\" : props.txt}\n    </span>\n  );\n};\n","import React from \"react\";\nimport \"./styles.css\";\nimport Hidden from \"../Hidden\";\n\nexport default function PlanetCard(props: {\n  name: string;\n  population: string;\n  climate: string;\n  terrain: string;\n  countFilms: string | number;\n  films: string;\n}) {\n  return (\n    <div className=\"planetCard\">\n      <div className=\"header\">\n        <h2>{props.name}</h2>\n      </div>\n      <div className=\"body\">\n        <p>\n          População:\n          <Hidden txt={props.population} />\n        </p>\n        <p>\n          Clima: <Hidden txt={props.climate} />\n        </p>\n        <p>\n          Terreno(s): <Hidden txt={props.terrain} />\n        </p>\n        <p>\n          Quantidade de filmes: <Hidden txt={props.countFilms} />\n        </p>\n        {/* <p>{props.films}</p> */}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\n\nexport default function Loading() {\n  return (\n    <div className=\"_container\">\n      <div className=\"lds-ripple\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport { sortPlanet, searchPlanet } from \"../../services/api/methods\";\nimport InputSearch from \"../../components/InputSearch\";\nimport PlanetCard from \"../../components/PlanetCard\";\nimport { DataPlanet } from \"../../services/api/ResultPlanet\";\nimport Loading from \"../../components/Loading\";\n\nexport default function Main() {\n  const [loading, setLoading] = React.useState(true);\n  const [planetSort, setPlanetSort] = React.useState([] as DataPlanet[]);\n  const [input, setInput] = React.useState(\"\");\n\n  const init = () => {\n    sortPlanet()\n      .then(res => {\n        //@ts-ignore\n        setPlanetSort([res]);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n  const handleSearch = () => {\n    // e.preventDefault();\n    setLoading(true);\n    searchPlanet(input)\n      .then(res => {\n        setInput(\"\");\n        //@ts-ignore\n        setPlanetSort(res);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  React.useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"grid\">\n        <h1 className=\"titlePage\">\n          StarWars\n          <br />\n          qual o planeta?\n        </h1>\n\n        <div className=\"divInput\">\n          <InputSearch\n            labelButton=\"Pesquisar\"\n            secundLabelButton=\"Sortear outro planeta\"\n            inputProps={{\n              value: input,\n              onChange: e => setInput(e.target.value),\n              placeholder: \"Digite o nome do planeta...\"\n            }}\n            buttonProps={{\n              onSubmit: e => {\n                e.preventDefault();\n                handleSearch();\n              },\n              onClick: e => {\n                e.preventDefault();\n                handleSearch();\n              }\n            }}\n            secundButton={{\n              onSubmit: e => {\n                e.preventDefault();\n                setLoading(true);\n                init();\n              },\n              onClick: e => {\n                e.preventDefault();\n                setLoading(true);\n                init();\n              }\n            }}\n          />\n        </div>\n        <div className={loading ? \"loading\" : \"cards\"}>\n          {loading ? (\n            <Loading />\n          ) : (\n            planetSort.map(planet => (\n              <PlanetCard\n                key={planet.url}\n                terrain={planet.terrain}\n                climate={planet.climate}\n                name={planet.name}\n                population={planet.population}\n                countFilms={planet.films.length}\n                films={planet.films.map((el: any) => el.title).join(\",\")}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\nexport default function Bg() {\n  return <div className=\"wrapper\" />;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MyRouters from \"./Router\";\nimport \"./Index.css\";\n\nReactDOM.render(<MyRouters />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Main from \"./pages/Main\";\nimport Bg from \"./components/Bg\";\n\nexport default function MyRouters() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/start-game\" component={Main} />\n        <Redirect from=\"*\" to=\"/start-game\" />\n      </Switch>\n      <Bg />\n    </BrowserRouter>\n  );\n}\n"],"sourceRoot":""}